name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: test_million
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install API dependencies
      run: |
        cd apps/api
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Install Worker dependencies
      run: |
        cd apps/worker
        pip install -r requirements.txt
    
    - name: Install Common package
      run: |
        cd packages/common
        pip install -e .
    
    - name: Install Signals package
      run: |
        cd packages/signals
        pip install -e .
    
    - name: Run Python tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_million
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key-for-ci-testing-only
      run: |
        pytest apps/api/tests/ --cov=apps/api --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  test-web:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/web
        npm ci
    
    - name: Run linting
      run: |
        cd apps/web
        npm run lint
    
    - name: Run type checking
      run: |
        cd apps/web
        npm run type-check
    
    - name: Build application
      run: |
        cd apps/web
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-python, test-web]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      run: |
        docker build -f apps/api/Dockerfile -t million-trader-api:test .
    
    - name: Build Worker Docker image
      run: |
        docker build -f apps/worker/Dockerfile -t million-trader-worker:test .
    
    - name: Build Web Docker image
      run: |
        docker build -f apps/web/Dockerfile -t million-trader-web:test .
    
    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml config

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

