version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: winu-bot-signal-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-winudb}
      POSTGRES_USER: ${POSTGRES_USER:-winu}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-winu250420}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-winu}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - winu-bot-signal-network

  redis:
    image: redis:7-alpine
    container_name: winu-bot-signal-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - winu-bot-signal-network

  traefik:
    image: traefik:v2.10
    container_name: winu-bot-signal-traefik
    command:
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.network=winu-bot-signal-network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.cloudflare.acme.tlschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.email=jonathanmaria@gmail.com"
      - "--certificatesresolvers.cloudflare.acme.storage=/data/acme.json"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--log.level=INFO"
      - "--accesslog=true"
    environment:
      - CLOUDFLARE_EMAIL=jonathanmaria@gmail.com
      - CLOUDFLARE_API_KEY=cnKuQFrCe-RsDMlvjBnKLsuQOqNLIANDtjmSybTD
      - DOMAIN=winu.app
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    networks:
      - winu-bot-signal-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-winu.app}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik.service=api@internal"

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: winu-bot-signal-api
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=winudb
      - POSTGRES_USER=winu
      - POSTGRES_PASSWORD=winu250420
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=this-is-a-very-long-and-secure-jwt-secret-key-for-production-use-only
      - MAX_POSITIONS=10
      - SCAN_INTERVAL_SECONDS=30
      - MIN_SIGNAL_SCORE=0.65
      - MIN_VOLUME_USD=100000
      - TOP_COINS_COUNT=200
    ports:
      - "8000:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - ./packages:/packages
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - winu-bot-signal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN:-winu.app}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=cloudflare"
      - "traefik.http.services.api.loadbalancer.server.port=8001"
      # CORS headers
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE,PATCH"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.api-cors.headers.addvaryheader=true"
      - "traefik.http.routers.api.middlewares=api-cors"

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: winu-bot-signal-web
    environment:
      - NEXTAUTH_URL=https://dashboard.${DOMAIN:-winu.app}
      - NEXT_PUBLIC_API_URL=https://api.${DOMAIN:-winu.app}
      - API_URL_INTERNAL=http://api:8001
    ports:
      - "3003:3000"
    depends_on:
      - api
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    networks:
      - winu-bot-signal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`dashboard.${DOMAIN:-winu.app}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=cloudflare"
      - "traefik.http.services.web.loadbalancer.server.port=3000"

  worker:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: winu-bot-signal-worker
    command: ["celery", "-A", "worker", "worker", "--loglevel=info", "--concurrency=2"]
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=this-is-a-very-long-and-secure-jwt-secret-key-for-production-use-only
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - ./packages:/packages
    restart: unless-stopped
    networks:
      - winu-bot-signal-network

  celery-beat:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: winu-bot-signal-celery-beat
    command: ["celery", "-A", "worker", "beat", "--loglevel=info"]
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=this-is-a-very-long-and-secure-jwt-secret-key-for-production-use-only
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - ./packages:/packages
    restart: unless-stopped
    networks:
      - winu-bot-signal-network

  prometheus:
    image: prom/prometheus:latest
    container_name: winu-bot-signal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - winu-bot-signal-network

  grafana:
    image: grafana/grafana:latest
    container_name: winu-bot-signal-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - winu-bot-signal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-winu.app}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  traefik_data:

networks:
  winu-bot-signal-network:
    external: false